# This is the Primary Configuration File for the Test Executive


[Global]
#This lists the number of stations that will be run from this process executive server.
numberOfStations = 1

#This sets the Default Web based UI Mode... Options are 'Station' or 'Global'
defaultUIMode = Station

#This configures the port that the OpenTest server will use
serverPort = 8090

#This configures the web server to listen for external connections
#If this value is set to false, the server will only respond to localhost or 127.0.0.1 addresses
serverAllowRemote = False

#This controls whether or not the test cells are opened automatically in the browser when the server starts
autoOpenCells = True

#This controls the number of threads that will be used in the thread pool for the Web Server
#If this line is missing, the default value of 10 will be used
threadPoolCount = 10

factoryName = CTH
#This sets the factory name for all stations

#This sets the factory line for all stations
factoryLine = Palomar

#This sets the operator name (For now... this should be moved eventually.)
operatorName = Operator

#This contains the process plan that will be executed by each cell.
#Note: Each Process Plan is loaded as a module, so omit adding the '.py' to the file name
[ProcessPlans]
dirpath = ..\\Palomar\\EEPROM
station0 = processPlan
station1 = processPlan

[StationNames]station0 = Reserved Test Stationstation1 = FENTON_GRIFFITH_FRU_FCT4[1]



#The Global Start Options controls whether or not a process server is configured to allow starting individual cells
#Or if all the test cells are configured to start together
[GlobalStartOptions]



#The station Start Options sections configures the presence or absence of a start button. The following are the
#Current Valid Choices
#'START' = Display A start button that starts the Single Configured ProcessStation
#'START_ALL' = Displays a start button that starts every configured Process Station
#'NONE' = No Start Button will be displayed on the Process Station
[StationStartOptions]
station0 = START
station1 = START
station2 = START
station3 = START
station4 = START
station5 = START

[Driver_System_Station]
#The Drivers section provides a mechanism to initiate objects that get created at application startup.
#Multiple drivers can be loaded, each section name that begins with 'Driver_' indicates that the section defines a new driver or a pair of related drivers.
#The options prefixed with shared_driver_ are used to define a shared driver (accessible from all stations).
#The options prefixed with station_driver are used to defined a station level local driver, an instance of this driver is instantiated for each station (as defined in Global.numberOfStations parameter)
#The section can be used to intialize drivers that have either shared scope, or local (station level)
#Options prefixed with shared_driver_ are used to describe a shared driver. Shared drivers must implement resource locking using threading.Lock() or smimillar...
#Options prefixed with station_driver are used to describe a station level local driver.


#TODO:
#Drivers are loaded into a dictionary that is exposed at the script level inside the ProcessPlan and ProcessStep classes as: TODO fill in variable name
#TODO:


#shared module definition
#shared_driver_module_name specifies the name of the module name containing the driver class, do not include th .py extension.
shared_driver_module_name = SharedDriver
shared_driver_module_path = process_plans
#shared_driver_class_name specifies the name of class that implements the driver defined in shared_driver_module_name,
#this is also the name of the variable that's added to the dictionary that's exposed at the script level.
#The class must implement an Initialize() method that takes zero arguments (besides self).
shared_driver_class_name = Driver

#station_driver_module_name specifies the name of the module name containing the driver class, do not include th .py extension.
station_driver_module_name = StationDriver

#station_driver_class_name specifies the name of the class that implements the driver defined inside station_driver_module_name
#The class must implement an Initialize() method that takes two arguments, a station index (starting with station #1),
#and a reference to a parent object as defined in station_driver_parent_instance (if station_driver_parent_instance is not defined None is automatically passed)
station_driver_class_name = Driver
#station_driver_parent_instance provides a method for identifying the module that's passed into the child object inside the Initialize(station_index, parent_object)
#the format is ConfigFileSection.shared_driver_module_name.shared_driver_class_name
station_driver_parent_instance = Driver_System_Station.%(shared_driver_module_name)s.%(shared_driver_class_name)s


[ReportWriters]


[CTH_Prism_Reporter]
#This setting is used to enabled/disable the reporter
Enabled = False
#This setting determines the primary output folder of the reporter
PrimaryOutputDir = 'reports'
#This setting determines a backup folder that is used if the write to the
#primary folder is unsuccessful
SecondaryOutputDir = 'reports_backup'
#This configures the default file extension for the report writer
FileExtension = 'log'



[HTMLReporter]
#This setting is used to enabled/disable the reporter
Enabled = True
#This setting determines the primary output folder of the reporter
PrimaryOutputDir = 'Palomar/reports'
#This setting determines a backup folder that is used if the write to the
#primary folder is unsuccessful
SecondaryOutputDir = 'Palomar/reports_backup'
#This configures the default file extension for the report writer
FileExtension = 'html'

[SummaryReporter]
#This setting is used to enabled/disable the reporter
Enabled = False
#This setting determines the primary output folder of the reporter
PrimaryOutputDir = 'reports'
#This setting determines a backup folder that is used if the write to the
#primary folder is unsuccessful
SecondaryOutputDir = 'reports_backup'
#This configures the default file extension for the report writer
FileExtension = 'txt'

[XMLReporter]
#This setting is used to enabled/disable the reporter
Enabled = False
#This setting determines the primary output folder of the reporter
PrimaryOutputDir = 'reports'
#This setting determines a backup folder that is used if the write to the
#primary folder is unsuccessful
SecondaryOutputDir = 'reports_backup'
#This configures the default file extension for the report writer
FileExtension = 'xml'

[JsonReporter]
#This setting is used to enabled/disable the reporter
Enabled = False
#This setting determines the primary output folder of the reporter
PrimaryOutputDir = 'reports'
#This setting determines a backup folder that is used if the write to the
#primary folder is unsuccessful
SecondaryOutputDir = 'reports_backup'
#This configures the default file extension for the report writer
FileExtension = 'txt'

[DebugTextReporter]
Enabled = False
PrimaryOutputDir = 'reports'
SecondaryOutputDir = 'reports_backup'
FileExtension = 'debug'

[DataWarehouseReporter]
#This setting is used to enabled/disable the reporter
Enabled = False
#This setting determines the primary output folder of the reporter
PrimaryOutputDir = 'reports'
#This setting determines a backup folder that is used if the write to the
#primary folder is unsuccessful
SecondaryOutputDir = 'reports_backup'
#This configures the default file extension for the report writer
FileExtension = 'dw'

[ProtocolBufferReporter]
#This setting is used to enabled/disable the reporter
Enabled = False
#This setting determines the primary output folder of the reporter
PrimaryOutputDir = 'reports'
#This setting determines a backup folder that is used if the write to the
#primary folder is unsuccessful
SecondaryOutputDir = 'reports_backup'
#This configures the default file extension for the report writer
FileExtension = 'pb'

[eFoxReporter]
#This setting is used to enabled/disable the reporter
Enabled = False
#This setting determines the primary output folder of the reporter
PrimaryOutputDir = 'reports'
#This setting determines a backup folder that is used if the write to the
#primary folder is unsuccessful
SecondaryOutputDir = 'reports_backup'
#This configures the default file extension for the report writer
FileExtension = 'txt'

[MongoDbReporter]
#This setting is used to enable/disable the reporter
Enabled = False
#If this setting is 'True' then the Debug Text Output is removed
#From the test results prior to saving the test result to MongoDB
SupressDebugOutput = True
ServerURL = mongodb://localhost:27017/

[CsvV1Reporter]
#This setting is used to enabled/disable the reporter
Enabled = True
#This setting determines the primary output folder of the reporter
PrimaryOutputDir = 'c://forCM'
#This setting determines a backup folder that is used if the write to the
#primary folder is unsuccessful
SecondaryOutputDir = 'c://forCM_backup'
#This configures the default file extension for the report writer
FileExtension = 'csv'

[OpenTestCloudReporter]
# This setting is used to enabled/disable the reporter
Enabled = True
# Sets the Server Upload URL For OpenTest-Cloud
ServerURL = https://opentest-1023.appspot.com/data/upload
# Sets the retry queue folder. This should be a local or network drive.
RetryQueueDir = 'Palomar/retry_queue'
# This configures the default file extension for the report writer
FileExtension = otdata
# The tester name to be supplied to OpenTest Cloud for authorization
TesterName = FenGriffFT04
# The tester secret to be supplied to OpenTest Cloud for authorization
TesterSecret = Y3XD7Z9nAiGMrl7MoO9aDupFIVxc8QnhRv4bD2M89ZbfO#NL#vkuasYy0Cu!gvLxiDy11akZhw50AVQr
#This setting determines the primary output folder of the reporter
PrimaryOutputDir = 'Palomar/reports'
#This setting determines a backup folder that is used if the write to the
#primary folder is unsuccessful
SecondaryOutputDir = 'Palomar/reports_backup'
KeepReportBackup = False
OutputFileOnly = False
Site = CTH
Manufacturer = CTH
DisableCompression = False
WriteReportsSerially = True
TimeoutSeconds = 600
SendDebugRecord = False
[ConsecutiveFailCount]
Hale = 0
Fenton = 0
[ConsecutiveFailHandling]
consecutive_fail_limit = 2
